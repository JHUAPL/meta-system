#!/bin/bash
# author:	Robert Player

#	FUNCTIONS
#===============================================================================
usage() {
  cat <<EOF
NOTES:
	- Running 'real data' through META results in more of a comparison between classifier output abundance profiles, rather than a comparison between each classifier output abundance profile and an expected (pre-defined) abundance profile.
	- Other than simply displaying the taxonomy of the abundance profile generated by a classifier, a consensus of taxids represented among output abundance profile is also provided.

DEPENDENCIES:
	GNU Parallel
		O. Tange (2011): GNU Parallel - The Command-Line Power Tool,
		;login: The USENIX Magazine, February 2011:42-47.
	NCBI Taxonomy data
		will be downloaded and formatted on first run
		ftp://ftp.ncbi.nlm.nih.gov/pub/taxonomy/taxdump.tar.gz


REQUIRED:
	-h	help	show this message
	-t	INT		number of threads to GNU parallel over
	-b	FILE*	should be left empty, or just not specified at commandline at all (i.e. there is no expected abundance when analyzing 'real data')
	-o	DIR		directory for tmp files and final comparison output files for visualization

OPTIONAL:
	N/A





EXAMPLE:	using kraken and meseeks classifiers (meseeks is one I've been
			working on for another project, don't worry about including this as part of META...
			yet, or probably ever since we'll want to maintain our unbiased-ness

# format classifier output
w="/data/apps/src/meta_system_system_metrics_evaluation_parsers"
o="$w/classifier_output_formatted/"
i="$w/classifier_output/kraken.report"
bash $w/parse_kraken.sh -i "$i" -o "$o"
i="$w/classifier_output/kraken2.report"
bash $w/parse_kraken2.sh -i "$i" -o "$o"
i="$w/classifier_output/krakenuniq.report"
bash $w/parse_krakenuniq.sh -i "$i" -o "$o"
i="$w/classifier_output/diamond.report"
bash $w/parse_diamond.sh -i "$i" -o "$o"
i="$w/classifier_output/mash.report"
bash $w/parse_mash.sh -i "$i" -o "$o"
i="$w/classifier_output/centrifuge.report"
bash $w/parse_centrifuge.sh -i "$i" -o "$o"
i="$w/classifier_output/kraken2_bracken.report"
bash $w/parse_bracken.sh -i "$i" -o "$o"


# run comparison
t="10"; w="/data/apps/src/meta_system_system_metrics_evaluation_parsers"
b=""
i="$w/classifier_output_formatted/"
o="$w/metacompare_test_output"
bash $w/metacompare_realdata.sh -t "$t" -i "$i" -o "$o"




EOF
}

#	DEFAULTS & INPUTS & CHECKS
#===============================================================================
#	notes:
#		echo $? (0 = successful execution)
# absolute path to script dir
absolute_path_x="$(
  readlink -fn -- "$0"
  echo x
)"
absolute_path_of_script="${absolute_path_x%x}"
scriptdir=$(dirname "$absolute_path_of_script")
bin="$scriptdir/bin"

# parse args
while getopts "ht:b:i:o:" OPTION; do
  case $OPTION in
  h)
    usage
    exit 1
    ;;
  t) THREADS=$OPTARG ;;
  b) BASELINE=$OPTARG ;;
  i) INDIR=$OPTARG ;;
  o) OUTPUT=$OPTARG ;;
  ?)
    usage
    exit
    ;;
  esac
done
# check args
if [[ -z "$THREADS" ]]; then
  printf "%s\n" "Please specify number of threads (-t)."
  exit
fi
#if [[ -z "$BASELINE" ]]; then printf "%s\n" "Please specify META abundance profile tsv (-b)."; exit; fi
#if [[ ! -f "$BASELINE" ]]; then printf "%s\n" "The input (-b) $BASELINE file does not exist."; exit; fi
if [[ -z "$INDIR" ]]; then
  printf "%s\n" "Please specify input directory (-i)."
  exit
fi
if [[ ! -d "$INDIR" ]]; then
  printf "%s\n" "The input (-i) $INDIR directory does not exist."
  exit
fi
if [[ -z $OUTPUT ]]; then
  printf "%s\n" "Please specify a final output directory (-o)."
  exit
fi
if [[ ! -d "$OUTPUT" ]]; then mkdir -p "$OUTPUT"; fi

# setup other variables
outdir="$OUTPUT"
tmp="$outdir/tmp"
if [[ ! -d "$tmp" ]]; then
  mkdir -p "$tmp"
fi

# setup for taxid2taxstring
if [[ ! -f "$scriptdir/taxdump/joined.dmp" ]]; then
  echo >&2 "getting ncbi taxonomy files"
  mkdir -p "$scriptdir/taxdump"
  wget ftp://ftp.ncbi.nlm.nih.gov/pub/taxonomy/taxdump.tar.gz -O "$scriptdir/taxdump/taxdump.tar.gz"
  gunzip "$scriptdir/taxdump/taxdump.tar.gz"
  tar -C "$scriptdir/taxdump" -xf "$scriptdir/taxdump/taxdump.tar"
  join -j 1 -t $'\t' -o 0 2.2 1.2 2.3 \
    <(grep "scientific name" "$scriptdir/taxdump/names.dmp" | cut -f1,3 | sort -k1,1) \
    <(cut -f1,3,5 "$scriptdir/taxdump/nodes.dmp" | sort -k1,1) | sort -n >"$scriptdir/taxdump/joined.dmp"
fi

profile_prep() {
  bn=$(basename "$1")
  echo >&2 "profile prep for: $bn"
  tmpp="$tmp/${bn}_dir"
  mkdir -p "$tmpp"
  cut -f1 "$1" >"$tmpp/taxid.list"
  # find taxstrings of each reported taxid
  $bin/taxid2taxstring.sh -i "$tmpp/taxid.list" -t "$scriptdir/taxdump" -o "$tmpp/taxid.list.ts"
  # make 3 col file of taxid, abundance, taxstring
  awk -F'\t' '{
		if(NR==FNR){
			abu[$1]=$2;
		}else{
			printf("%s\t%s\t%s\n",$1,abu[$1],$2);
		}
	}' "$1" "$tmpp/taxid.list.ts" >"$tmpp/taxid.abu.ts"

  # clean up taxid2taxstring of P,C,O,F,G,S per taxid to separate files
  #	first line is abundance of tip taxid
  while read tat; do
    printf "$tat" | awk -F'\t' -v tmp="$tmpp" '{
			split($3,ts,"|");
			print($2) > tmp"/"$1".taxlist";
			for(i in ts){
				print(ts[i]) > tmp"/"$1".taxlist";
			}
		}'
  done <"$tmpp/taxid.abu.ts"

  #	20200528 - adding in additional output format for sunburst where missing ranks are padded in (taxid.abu.ts.padded)
  find "$tmpp" -type f -name "*.taxlist" | sort | while read list; do
    taxid=$(basename "$list" | sed 's/\..*//')
    abu=$(head -1 "$list")
    printf "%s\t%s\t%s|" "$taxid" "$abu" "1;root(no rank)"
    for rank in "superkingdom" "phylum" "class" "order" "family" "genus" "species"; do
      # 20200730 fix - some ranks may appear on multiple lines, however the first will be the highest level (i.e. everything else is a subrank that may be ignored)
      check=$(grep "($rank)" "$list" | head -1)
      if [[ "$check" != "" ]]; then
        printf "$check|"
      else
        printf "x;unassigned($rank)|"
      fi
    done
    if [[ $(grep -A10 "(species)" "$list" | wc -l) -gt "1" ]]; then
      last=$(tail -1 "$list" | sed 's/(no rank)/(strain)/')
      printf "%s\n" "$last"
    else
      printf "x;unassigned(strain)\n"
    fi
  done | sed 's/\(|x;unassigned([A-Za-z]\+)\)\+$//' >"$tmpp/taxid.abu.ts.padded"

  # make abundance files per rank (also roll up abundance for same rank lines)
  for rank in "superkingdom" "phylum" "class" "order" "family" "genus" "species"; do
    find "$tmpp" -type f -name "*.taxlist" | sort | while read list; do
      # ensure rank exists before printing anything
      # 20200608, bug fix... some 'unclassified' intra-rank ranks... (only return first match in *.taxlist)
      row=$(grep -m1 "($rank)" "$list")
      if [[ "$row" != "" ]]; then
        abu=$(head -1 "$list")
        printf "$abu\t$row\n"
      fi
    done | awk -F'\t' '{
			abu[$2]+=$1;
		}END{
			for(ts in abu){
				printf("%.9f\t%s\n",abu[ts],ts);
			}
		}' >"$tmpp/byrank-$rank.tsv"
    # 20200527, might also need to adjust abundances here to output 100% at each rank
    # 20200608, no, this would throw off abudance prediction for correct taxid assignments

    # make file with abundance and org name per taxid
    sed -e 's/;/\t/' -e 's/(.*//' "$tmpp/byrank-$rank.tsv" >"$tmpp/taxid_abu_org-$rank.tsv"

  done
  # check if rank below species
  find "$tmpp" -type f -name "*.taxlist" | sort | while read list; do
    # first check if species row even exists
    if [[ $(grep "(species)" "$list") != "" ]]; then
      ranktip=$(grep -A1000 "(species)" "$list" | tail -1 | sed -e 's/.*(//' -e 's/)//')
      if [[ "$ranktip" != "species" ]]; then
        printf "%s\t" $(head -1 "$list")
        grep -A1000 "(species)" "$list" | tail -1
      fi
    fi
  done | awk -F'\t' '{
		abu[$2]+=$1;
	}END{
		for(ts in abu){
			printf("%.9f\t%s\n",abu[ts],ts);
		}
	}' >"$tmpp/byrank-strain.tsv"
  # make file with abundance and org name per taxid
  sed -e 's/;/\t/' -e 's/(.*//' "$tmpp/byrank-strain.tsv" >"$tmpp/taxid_abu_org-strain.tsv"

}
export tmp bin scriptdir
export -f profile_prep

# get tax info of each parsed classifier output
find "$INDIR" -maxdepth 1 -type f | sort >"$tmp/parallel.taxinfo"
parallel --arg-file "$tmp/parallel.taxinfo" --jobs="$THREADS" profile_prep

# make intermediate consensus matrix
for rank in "superkingdom" "phylum" "class" "order" "family" "genus" "species" "strain"; do
  find "$tmp" -type f -name "taxid_abu_org-$rank.tsv" | sort -V | while read profile; do
    name=$(basename $(dirname "$profile") | sed -e 's/parsed_//' -e 's/_dir//')
    awk -F'\t' -v name="$name" -v rank="$rank" '{printf("%s\t%s\t%s\n",name,rank,$0)}' "$profile"
  done
done >"$tmp/classifier_rank_abu_taxid_org.tsv"

# add comma separated list of classifiers that identiy the taxid per line
awk -F'\t' '{
	class[$1]+=1;
	taxid[$4]+=1;
	ct[$1][$4]=$0;
}END{
	for(t in taxid){
		for(c in class){
			if(ct[c][t]!=""){
				printf("%s\t",ct[c][t]);
				for(cc in class){
					if(ct[cc][t]!=""){
						printf("%s,",cc);
					}
				}
			}
			printf("\n");
		}
	}
}' "$tmp/classifier_rank_abu_taxid_org.tsv" | awk '{if($0!=""){print($0)}}' | sed 's/,$//' >"$outdir/classifier_rank_abu_taxid_org_inclusion.tsv"

# cleanup
#rm -rf "$tmp"
